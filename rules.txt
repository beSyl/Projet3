Le labyrinthe est vu comme un plateau de jeu de 15 lignes (numérotées de 0 à 14) et 15 colonnes (numérotées de 0 à 14), soit 225 cases numérotées de 0 à 224 (de haut en bas et de gauche à droite).

Pour le matérialiser, on rédige un fichier 'labyrinth.txt' de 15 lignes composées de 15 caractères chacune.
Ces caractères symbolisent soit une case 'chemin' via laquelle MacGyver peut se déplacer s'il s'agit d'un caractère espace «  », soit une case 'mur' empêchant MacGyver de se déplacer s'il s'agit d'un caractère « X ».

On instancie un labyrinthe à partir de la classe 'Labyrinth'.

Le programme Python lit le fichier 'labyrinth.txt' pour enregistrer chaque case dans une liste 'list_labyrinth'. 
L'index de chaque caractère dans 'list_labyrinth' correspond au numéro de la case sur le plateau de jeu (de l'index 0 à l'index 224). On enregistre ainsi le numéro des cases 'chemin' dans une liste 'walls', et le numéro des cases 'murs' dans une liste 'walls'.
On détermine la position de 3 objets de manière aléatoire en ajoutant leur numéro de case dans la liste 'objects' à partir de la liste 'road' (car l'objet ne peut pas être placé sur une case 'mur').
On crée une variable du nom de l'objet à ramasser en précisant sa valeur dans la liste 'objects'.
---
ex : 
objects = [12, 208, 143]
tube = objects[0] #tube en case 12
needle = objects[1] #aiguille en case 208
ether = objects[2] #ether en case 143
---

On instancie le personnage MacGyver (instance 'macGyver') à partir de la classe 'Hero'.
Il a pour attributs : 
¤ sa positon en numéro de case (0 au départ)
¤ un compteur d'objets ramassés (0 au départ)
¤ son image
¤ le numéro de ligne sur laquelle il se trouve (utile pour Pygame)
¤ le numéro de colonne sur laquelle il se trouve (utile pour Pygame)

Si un déplacement conduit à une case 'chemin' (i.e. si le numéro de case est présentdans la liste 'road'), la position de MacGyver (i.e. le numéro de la case sur laquelle il se trouve) est incrémentée :
¤ de 1 s'il se déplace vers la droite
¤ de -1 s'il se déplace vers la gauche
¤ de 15 s'il se déplace vers le bas (i.e. la valeur d'une ligne en plus)
¤ de -15 s'il se déplace vers le haut (i.e la valeur d'une ligne en moins)
Si un déplacement conduit à une case 'mur' (i.e. si le numéro de case est présentdans la liste 'walls'), le déplacement ne peut pas se faire et vaut 0.

Pour Pygame, il est nécessaire de connaître les positions en abscisse ('column') et en ordonnée ('line').
Aussi, on détermine cela dans la classe Labyrinth comme suit : 
¤ self.line = self.position//Labyrinth.WIDTH  #numéro de case où se situe MacGyver//largeur en cases du labyrinthe
¤ self.column = self.position-(self.line*Labyrinth.WIDTH)  #numéro de case où se situe MacGyver-(numéro de ligne x largeur en cases du labyrinthe)
On utilise ici une division entière.
---
ex : 
MacGyver en case 3.
macGyver.line = 3//15 #MacGyver en ligne 0
macGyver.column = 3-(0*15) #MacGyver en colonne 3

MacGyver en case 148.
macGyver.line = 148//15 #MacGyver en ligne 9
macGyver.column = 148-(9*15) #MacGyver en colonne 13
---

Le gardien est déterminé par la case de fin 'road[-1]'.
Une instance de classe Hero ne semble pas nécessaire du fait que seule une position statique est nécessaire (les autres attributs sont superflus).
Si MacGyver atteint la dernière case, on vérifie si son compteur d'objets ramassés (macGyver.objectsCounter) est suffisamment valorisé : si tel est le cas, il a gagné ; sinon, il a perdu.